######
# Configuration for lf 
# ~/.config/lf/lfrc
#
### SETTINGS
# General

set icons true
set drawbox true
set globsearch true
set incsearch true
set number true
set relativenumber true
set scrolloff 4
set tabstop 2
set ratios 1:2:2
set cleaner ~/.config/lf/lf_kitty_clean
set previewer ~/.config/lf/lf_kitty_preview
############################################################################
# SHELL

set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"
############################################################################
# INIT

cmd on-cd &{{
    # display git repository status in your prompt
    source /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    git=$(__git_ps1 " (%s)") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}} 

# !fpath=(/Users/me/.config/zsh/functions $fpath) && autoload heading && heading

&source /Users/me/.config/zsh/.zshenv
&source /Users/me/.config/zsh/.zshrc
on-cd
# mappings
map H set hidden!
map r :rename $f
map <return> $${SHELL}
############################################################################
## TODOLIST

cmd todo !{{
  set -f 
  clear
  sh -c '/Users/me/.local/bin/scripts/todo.sh'
}}
# mappings
map <c-t> :todo
############################################################################
# OPEN DEFAULT APP

cmd open ${{
  case $(file --mime-type "$(readlink -f $f)" -b) in
    text/*|application/json|application/octet-stream) $EDITOR $fx;;
    *) for f in $fx; do open $f > /dev/null 2> /dev/null & done;;
  esac
}}
# mappings
map <enter> &open $f
map o &open $f
############################################################################
# TRASH

cmd trash %{{ 
  set -f
  [[ ! -d ~/.Trash ]] && mkdir -pv ~/.Trash/

  mv -v $fx ~/.Trash/ || (cp -rv $fx ~/.Trash/ && rm -rf $fx)
}}
# mappings
map <delete> :delete $fx
map D :trash $fx

############################################################################
# (DE)COMPRESSION

# decompression
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.tar.zst) zstd -d $f && tar xvf ${f%.zst}
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}
# compression: tar
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar cf $1.tar.xz --compress-program='xz -z -9e -T4 -f' $1 
    rm -rf $1
}}
# compression: zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
############################################################################
# LINK

cmd link !{{
  set -f

  while getopts ":dfo:" option ; do
    case $option in 
      f ) p='f' ;;
          #   arg=${2:-'..'} ;; 
      d ) sup="$(sudo)" ;;
      o ) arg=$OPTARG ;;
      ? ) echo "invalid option" ;;
    esac
  done

  for file in $fx ; do

    target="${file##*/}"
    ${sup:-''}ln -sv${p:-''} "${file}" ${arg:='..'}/${target/%.[sl][hu]*}
  done
}}
# mappings
map <c-l>
map <c-l>l push :link<space>-o<space>
map <c-l>L push :link<space>-fo<space>
map <c-l>d push :link<space>-do<space>
map <c-l>D push :link<space>-dfo<space>
############################################################################
# GIT

cmd git-add !{{
  set -f 

  git status &&
  git add $fx
}}
# mappings
map g
map gg          $lazygit -p=$PWD
map gi          %git init ${f%/*} -C
map gm     push %gh<space>repo<space>create<space>--public<space>
map gM     push %gh<space>repo<space>create<space>--private<space>
map gC     push %gh<space>repo<space>clone<space>
map ga          :git-add $fx
map gc     push !git<space>commit<space>-m<space>
map gp          !git push
map gu     push !git<space>push<space>-u<space>
map gP     push !git<space>pull<space>
map gf     push !git<space>fetch<space>--all<space>
map g<c-m>      !git merge $fx
############################################################################
# PERMISSIONS

# Chown
cmd chown %set -f; sudo chown -v $1 $fx
cmd chown-recurse %set -f; sudo chown -Rv $1 $fx
# mappings
map <a-o> push :chown<space>
map <a-O> push :chown-recurse<space>
# Add permission
# mappings 
map +
map +x %sudo chmod -v +x $fx
map +r %sudo chmod -v +r $fx
map +w %sudo chmod -v +w $fx
# Remove permission
# mappings
map -
map -x %sudo chmod -v -x $fx
map -r %sudo chmod -v -r $fx
map -w %sudo chmod -v -w $fx
############################################################################
# CREATE DIR/FILE

# mkdir
cmd mkdir $mkdir -pv "$@"
# mappings
map a
map A
map A push :mkdir<space>
map a push $nvim<space>
############################################################################
# Neovim

map e
map E
map <c-e>
map <a-e>
map e $nvim $fx
map <c-e> push $sudo<space>nvim<space>
map <a-e> $nvim /Users/me/.config/lf/lfrc
############################################################################
#MacPorts

cmd port_upgrade !{{
  set -f
  sudo port selfupdate &&
  sudo port upgrade -cRu outdated
}}
# mappings
map <c-p>
map <c-p>i push !sudo<space>port<space>install<space>-c<space>
map <c-p>u      :port_upgrade
map <c-p>r push !sudo<space>port<space>uninstall<space>-u<space>
map <c-p>s push !sudo<space>port<space>select<space>--set<space>
map <c-p>S push !sudo port select --summary
map <c-p>p $sudo port
############################################################################
# Homebrew

cmd brew_install :{{
  push !brew<space>install<space>
}}
# mappings
map b 
map bi :brew_install
map bu      !brew update && brew upgrade
############################################################################

